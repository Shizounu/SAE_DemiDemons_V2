//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""RythmGame"",
            ""id"": ""6ab2d30f-4cba-4a99-88a6-6c091075c3de"",
            ""actions"": [
                {
                    ""name"": ""Activate Lane 1"",
                    ""type"": ""Button"",
                    ""id"": ""7a7be0fe-f1d6-4136-ba4a-09b2d1c9d98e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Lane 2"",
                    ""type"": ""Button"",
                    ""id"": ""be0c9f52-3e62-4a43-9d86-2f25beabc3a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Lane 3"",
                    ""type"": ""Button"",
                    ""id"": ""79b00dc7-3ce8-4e3a-86ca-75907280532e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Lane 4"",
                    ""type"": ""Button"",
                    ""id"": ""f8cd2160-cd92-494b-bc42-65b94ba8f178"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07907ac9-0986-4acd-a3ff-993896281e4a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Activate Lane 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a7fa2d4-1c2b-465a-a170-30b8a6571937"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Activate Lane 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d908c88-abd5-450b-9328-defc6010062a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Activate Lane 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e47b0d8f-84de-4ba3-8cd8-47206397506a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Activate Lane 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef819fbb-9a5e-4eee-9a62-ea4016c76d87"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Activate Lane 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cad60542-4960-459c-8d1c-9201e7c43765"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Activate Lane 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5aefcaee-de17-4acb-b790-b14e834705f0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Activate Lane 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""385145b2-3b19-412a-b3e8-e2500f9b2b5f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Activate Lane 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // RythmGame
        m_RythmGame = asset.FindActionMap("RythmGame", throwIfNotFound: true);
        m_RythmGame_ActivateLane1 = m_RythmGame.FindAction("Activate Lane 1", throwIfNotFound: true);
        m_RythmGame_ActivateLane2 = m_RythmGame.FindAction("Activate Lane 2", throwIfNotFound: true);
        m_RythmGame_ActivateLane3 = m_RythmGame.FindAction("Activate Lane 3", throwIfNotFound: true);
        m_RythmGame_ActivateLane4 = m_RythmGame.FindAction("Activate Lane 4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RythmGame
    private readonly InputActionMap m_RythmGame;
    private IRythmGameActions m_RythmGameActionsCallbackInterface;
    private readonly InputAction m_RythmGame_ActivateLane1;
    private readonly InputAction m_RythmGame_ActivateLane2;
    private readonly InputAction m_RythmGame_ActivateLane3;
    private readonly InputAction m_RythmGame_ActivateLane4;
    public struct RythmGameActions
    {
        private @InputActions m_Wrapper;
        public RythmGameActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateLane1 => m_Wrapper.m_RythmGame_ActivateLane1;
        public InputAction @ActivateLane2 => m_Wrapper.m_RythmGame_ActivateLane2;
        public InputAction @ActivateLane3 => m_Wrapper.m_RythmGame_ActivateLane3;
        public InputAction @ActivateLane4 => m_Wrapper.m_RythmGame_ActivateLane4;
        public InputActionMap Get() { return m_Wrapper.m_RythmGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RythmGameActions set) { return set.Get(); }
        public void SetCallbacks(IRythmGameActions instance)
        {
            if (m_Wrapper.m_RythmGameActionsCallbackInterface != null)
            {
                @ActivateLane1.started -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane1;
                @ActivateLane1.performed -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane1;
                @ActivateLane1.canceled -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane1;
                @ActivateLane2.started -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane2;
                @ActivateLane2.performed -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane2;
                @ActivateLane2.canceled -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane2;
                @ActivateLane3.started -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane3;
                @ActivateLane3.performed -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane3;
                @ActivateLane3.canceled -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane3;
                @ActivateLane4.started -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane4;
                @ActivateLane4.performed -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane4;
                @ActivateLane4.canceled -= m_Wrapper.m_RythmGameActionsCallbackInterface.OnActivateLane4;
            }
            m_Wrapper.m_RythmGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ActivateLane1.started += instance.OnActivateLane1;
                @ActivateLane1.performed += instance.OnActivateLane1;
                @ActivateLane1.canceled += instance.OnActivateLane1;
                @ActivateLane2.started += instance.OnActivateLane2;
                @ActivateLane2.performed += instance.OnActivateLane2;
                @ActivateLane2.canceled += instance.OnActivateLane2;
                @ActivateLane3.started += instance.OnActivateLane3;
                @ActivateLane3.performed += instance.OnActivateLane3;
                @ActivateLane3.canceled += instance.OnActivateLane3;
                @ActivateLane4.started += instance.OnActivateLane4;
                @ActivateLane4.performed += instance.OnActivateLane4;
                @ActivateLane4.canceled += instance.OnActivateLane4;
            }
        }
    }
    public RythmGameActions @RythmGame => new RythmGameActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    public interface IRythmGameActions
    {
        void OnActivateLane1(InputAction.CallbackContext context);
        void OnActivateLane2(InputAction.CallbackContext context);
        void OnActivateLane3(InputAction.CallbackContext context);
        void OnActivateLane4(InputAction.CallbackContext context);
    }
}
